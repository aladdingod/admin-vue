{"remainingRequest":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vueProject\\vueSingle\\vue-element-admin\\src\\views\\login\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\src\\views\\login\\index.vue","mtime":1572250759387},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { validUsername } from \"@/utils/validate\";\r\nimport SocialSign from \"./components/SocialSignin\";\r\n\r\nexport default {\r\n  name: \"Login\",\r\n  components: { SocialSign },\r\n  data() {\r\n    const validateUsername = (rule, value, callback) => {\r\n      if (!validUsername(value)) {\r\n        callback(new Error(\"Please enter the correct user name\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    const validatePassword = (rule, value, callback) => {\r\n      if (value.length < 6) {\r\n        callback(new Error(\"The password can not be less than 6 digits\"));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      loginForm: {\r\n        username: \"admin\",\r\n        password: \"111111\"\r\n      },\r\n      loginRules: {\r\n        username: [\r\n          { required: true, trigger: \"blur\", validator: validateUsername }\r\n        ],\r\n        password: [\r\n          { required: true, trigger: \"blur\", validator: validatePassword }\r\n        ]\r\n      },\r\n      passwordType: \"password\",\r\n      capsTooltip: false,\r\n      loading: false,\r\n      showDialog: false,\r\n      redirect: undefined,\r\n      otherQuery: {}\r\n    };\r\n  },\r\n  watch: {\r\n    $route: {\r\n      handler: function(route) {\r\n        const query = route.query;\r\n        if (query) {\r\n          this.redirect = query.redirect;\r\n          this.otherQuery = this.getOtherQuery(query);\r\n        }\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  created() {\r\n    // window.addEventListener('storage', this.afterQRScan)\r\n  },\r\n  mounted() {\r\n    if (this.loginForm.username === \"\") {\r\n      this.$refs.username.focus();\r\n    } else if (this.loginForm.password === \"\") {\r\n      this.$refs.password.focus();\r\n    }\r\n  },\r\n  destroyed() {\r\n    // window.removeEventListener('storage', this.afterQRScan)\r\n  },\r\n  methods: {\r\n    checkCapslock({ shiftKey, key } = {}) {\r\n      if (key && key.length === 1) {\r\n        if (\r\n          (shiftKey && (key >= \"a\" && key <= \"z\")) ||\r\n          (!shiftKey && (key >= \"A\" && key <= \"Z\"))\r\n        ) {\r\n          this.capsTooltip = true;\r\n        } else {\r\n          this.capsTooltip = false;\r\n        }\r\n      }\r\n      if (key === \"CapsLock\" && this.capsTooltip === true) {\r\n        this.capsTooltip = false;\r\n      }\r\n    },\r\n    showPwd() {\r\n      if (this.passwordType === \"password\") {\r\n        this.passwordType = \"\";\r\n      } else {\r\n        this.passwordType = \"password\";\r\n      }\r\n      this.$nextTick(() => {\r\n        this.$refs.password.focus();\r\n      });\r\n    },\r\n    handleLogin() {\r\n      console.log(\"登录请求执行\");\r\n      this.$refs.loginForm.validate(valid => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          this.$store\r\n            .dispatch(\"user/login\", this.loginForm)\r\n            .then(() => {\r\n              console.log(\"登录请求成功返回\");\r\n              this.$router.push({\r\n                path: this.redirect || \"/\",\r\n                query: this.otherQuery\r\n              });\r\n              this.loading = false;\r\n            })\r\n            .catch(() => {\r\n              this.loading = false;\r\n            });\r\n        } else {\r\n          console.log(\"error submit!!\");\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    getOtherQuery(query) {\r\n      return Object.keys(query).reduce((acc, cur) => {\r\n        if (cur !== \"redirect\") {\r\n          acc[cur] = query[cur];\r\n        }\r\n        return acc;\r\n      }, {});\r\n    }\r\n    // afterQRScan() {\r\n    //   if (e.key === 'x-admin-oauth-code') {\r\n    //     const code = getQueryObject(e.newValue)\r\n    //     const codeMap = {\r\n    //       wechat: 'code',\r\n    //       tencent: 'code'\r\n    //     }\r\n    //     const type = codeMap[this.auth_type]\r\n    //     const codeName = code[type]\r\n    //     if (codeName) {\r\n    //       this.$store.dispatch('LoginByThirdparty', codeName).then(() => {\r\n    //         this.$router.push({ path: this.redirect || '/' })\r\n    //       })\r\n    //     } else {\r\n    //       alert('第三方登录失败')\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n};\r\n",null]}