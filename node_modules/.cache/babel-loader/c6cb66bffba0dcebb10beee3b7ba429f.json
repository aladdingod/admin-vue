{"remainingRequest":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\vueProject\\vueSingle\\vue-element-admin\\src\\utils\\request.js","dependencies":[{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\src\\utils\\request.js","mtime":1572250441838},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth'; // create an axios instance\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 5000 // request timeout\n\n}); // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  if (store.getters.token) {\n    // let each request carry token\n    // ['X-Token'] is a custom headers key\n    // please modify it according to the actual situation\n    config.headers['X-Token'] = getToken();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n */\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  var res = response.data.result; // if the custom code is not 20000, it is judged as an error.\n\n  if (parseInt(res.resultCode) !== 0) {\n    Message({\n      message: res.message || 'Error',\n      type: 'error',\n      duration: 5 * 1000\n    });\n    console.log('request请求'); // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n\n    if (res.resultCode === 50008 || res.resultCode === 50012 || res.resultCode === 50014) {\n      // to re-login\n      MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n        confirmButtonText: 'Re-Login',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(function () {\n        store.dispatch('user/resetToken').then(function () {\n          location.reload();\n        });\n      });\n    }\n\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",null]}