{"remainingRequest":"F:\\myblob\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!F:\\myblob\\vue-element-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\myblob\\vue-element-admin\\src\\router\\index.js","dependencies":[{"path":"F:\\myblob\\vue-element-admin\\src\\router\\index.js","mtime":1574233464456},{"path":"F:\\myblob\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\myblob\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\myblob\\vue-element-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"F:\\\\myblob\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetRouter = resetRouter;\nexports.default = exports.asyncRoutes = exports.constantRoutes = void 0;\n\nvar _interopRequireWildcard2 = _interopRequireDefault(require(\"F:\\\\myblob\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/interopRequireWildcard\"));\n\nvar _vue = _interopRequireDefault(require(\"vue\"));\n\nvar _vueRouter = _interopRequireDefault(require(\"vue-router\"));\n\nvar _layout = _interopRequireDefault(require(\"@/layout\"));\n\nvar _table = _interopRequireDefault(require(\"./modules/table\"));\n\n_vue.default.use(_vueRouter.default);\n/* Layout */\n\n\n/**\r\n * Note: sub-menu only appear when route children.length >= 1\r\n * Detail see: https://panjiachen.github.io/vue-element-admin-site/guide/essentials/router-and-nav.html\r\n *\r\n * hidden: true                   if set true, item will not show in the sidebar(default is false)\r\n * alwaysShow: true               if set true, will always show the root menu\r\n *                                if not set alwaysShow, when item has more than one children route,\r\n *                                it will becomes nested mode, otherwise not show the root menu\r\n * redirect: noRedirect           if set noRedirect will no redirect in the breadcrumb\r\n * name:'router-name'             the name is used by <keep-alive> (must set!!!)\r\n * meta : {\r\n    roles: ['admin','editor']    control the page roles (you can set multiple roles)\r\n    title: 'title'               the name show in sidebar and breadcrumb (recommend set)\r\n    icon: 'svg-name'             the icon show in the sidebar\r\n    noCache: true                if set true, the page will no be cached(default is false)\r\n    affix: true                  if set true, the tag will affix in the tags-view\r\n    breadcrumb: false            if set false, the item will hidden in breadcrumb(default is true)\r\n    activeMenu: '/example/list'  if set path, the sidebar will highlight the path you set\r\n  }\r\n */\n\n/**\r\n * constantRoutes\r\n * a base page that does not have permission requirements\r\n * all roles can be accessed\r\n */\nvar constantRoutes = [{\n  path: \"/redirect\",\n  component: _layout.default,\n  hidden: true,\n  children: [{\n    path: \"/redirect/:path*\",\n    component: function component() {\n      return Promise.resolve().then(function () {\n        return (0, _interopRequireWildcard2.default)(require(\"@/views/redirect/index\"));\n      });\n    }\n  }]\n}, {\n  path: \"/login\",\n  component: function component() {\n    return Promise.resolve().then(function () {\n      return (0, _interopRequireWildcard2.default)(require(\"@/views/login/index\"));\n    });\n  },\n  hidden: true\n}, {\n  path: \"/auth-redirect\",\n  component: function component() {\n    return Promise.resolve().then(function () {\n      return (0, _interopRequireWildcard2.default)(require(\"@/views/login/auth-redirect\"));\n    });\n  },\n  hidden: true\n}, {\n  path: \"/404\",\n  component: function component() {\n    return Promise.resolve().then(function () {\n      return (0, _interopRequireWildcard2.default)(require(\"@/views/error-page/404\"));\n    });\n  },\n  hidden: true\n}, {\n  path: \"/401\",\n  component: function component() {\n    return Promise.resolve().then(function () {\n      return (0, _interopRequireWildcard2.default)(require(\"@/views/error-page/401\"));\n    });\n  },\n  hidden: true\n}, {\n  path: \"/\",\n  component: _layout.default,\n  redirect: \"/dashboard\",\n  children: [{\n    path: \"dashboard\",\n    component: function component() {\n      return Promise.resolve().then(function () {\n        return (0, _interopRequireWildcard2.default)(require(\"@/views/dashboard/index\"));\n      });\n    },\n    name: \"Dashboard\",\n    meta: {\n      title: \"Dashboard\",\n      icon: \"dashboard\",\n      affix: false\n    }\n  }]\n}, {\n  path: \"/profile\",\n  component: _layout.default,\n  redirect: \"/profile/index\",\n  hidden: true,\n  children: [{\n    path: \"index\",\n    component: function component() {\n      return Promise.resolve().then(function () {\n        return (0, _interopRequireWildcard2.default)(require(\"@/views/profile/index\"));\n      });\n    },\n    name: \"Profile\",\n    meta: {\n      title: \"Profile\",\n      icon: \"user\",\n      noCache: true\n    }\n  }],\n  meta: {\n    roles: [\"editor\"]\n  }\n}];\n/**\r\n * asyncRoutes\r\n * the routes that need to be dynamically loaded based on user roles\r\n */\n\nexports.constantRoutes = constantRoutes;\nvar asyncRoutes = [{\n  path: \"/icon\",\n  component: _layout.default,\n  children: [{\n    path: \"index\",\n    component: function component() {\n      return Promise.resolve().then(function () {\n        return (0, _interopRequireWildcard2.default)(require(\"@/views/icons/index\"));\n      });\n    },\n    name: \"Icons\",\n    meta: {\n      title: \"Icons\",\n      icon: \"icon\",\n      noCache: true\n    }\n  }]\n},\n/** when your routing map is too long, you can split it into small modules **/\n_table.default, {\n  path: \"/error\",\n  component: _layout.default,\n  redirect: \"noRedirect\",\n  name: \"ErrorPages\",\n  meta: {\n    title: \"Error Pages\",\n    icon: \"404\"\n  },\n  children: [{\n    path: \"401\",\n    component: function component() {\n      return Promise.resolve().then(function () {\n        return (0, _interopRequireWildcard2.default)(require(\"@/views/error-page/401\"));\n      });\n    },\n    name: \"Page401\",\n    meta: {\n      title: \"401\",\n      noCache: true\n    }\n  }, {\n    path: \"404\",\n    component: function component() {\n      return Promise.resolve().then(function () {\n        return (0, _interopRequireWildcard2.default)(require(\"@/views/error-page/404\"));\n      });\n    },\n    name: \"Page404\",\n    meta: {\n      title: \"404\",\n      noCache: true\n    }\n  }]\n}, {\n  path: \"/theme\",\n  component: _layout.default,\n  children: [{\n    path: \"index\",\n    component: function component() {\n      return Promise.resolve().then(function () {\n        return (0, _interopRequireWildcard2.default)(require(\"@/views/theme/index\"));\n      });\n    },\n    name: \"Theme\",\n    meta: {\n      title: \"Theme\",\n      icon: \"theme\"\n    }\n  }]\n}, // 404 page must be placed at the end !!!\n{\n  path: \"*\",\n  redirect: \"/404\",\n  hidden: true\n}];\nexports.asyncRoutes = asyncRoutes;\n\nvar createRouter = function createRouter() {\n  return new _vueRouter.default({\n    mode: \"history\",\n    // require service support\n    scrollBehavior: function scrollBehavior() {\n      return {\n        y: 0\n      };\n    },\n    routes: constantRoutes\n  });\n};\n\nvar router = createRouter(); // Detail see: https://github.com/vuejs/vue-router/issues/1234#issuecomment-357941465\n\nfunction resetRouter() {\n  var newRouter = createRouter();\n  router.matcher = newRouter.matcher; // reset router\n}\n\nvar _default = router;\nexports.default = _default;",null]}