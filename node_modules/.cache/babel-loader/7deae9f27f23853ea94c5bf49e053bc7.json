{"remainingRequest":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\vueProject\\vueSingle\\vue-element-admin\\src\\components\\Tinymce\\dynamicLoadScript.js","dependencies":[{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\src\\components\\Tinymce\\dynamicLoadScript.js","mtime":1572245987031},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nvar callbacks = [];\n\nfunction loadedTinymce() {\n  // to fixed https://github.com/PanJiaChen/vue-element-admin/issues/2144\n  // check is successfully downloaded script\n  return window.tinymce;\n}\n\nvar dynamicLoadScript = function dynamicLoadScript(src, callback) {\n  var existingScript = document.getElementById(src);\n\n  var cb = callback || function () {};\n\n  if (!existingScript) {\n    var script = document.createElement('script');\n    script.src = src; // src url for the third-party library being loaded.\n\n    script.id = src;\n    document.body.appendChild(script);\n    callbacks.push(cb);\n    var onEnd = 'onload' in script ? stdOnEnd : ieOnEnd;\n    onEnd(script);\n  }\n\n  if (existingScript && cb) {\n    if (loadedTinymce()) {\n      cb(null, existingScript);\n    } else {\n      callbacks.push(cb);\n    }\n  }\n\n  function stdOnEnd(script) {\n    script.onload = function () {\n      // this.onload = null here is necessary\n      // because even IE9 works not like others\n      this.onerror = this.onload = null;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _cb = _step.value;\n\n          _cb(null, script);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      callbacks = null;\n    };\n\n    script.onerror = function () {\n      this.onerror = this.onload = null;\n      cb(new Error('Failed to load ' + src), script);\n    };\n  }\n\n  function ieOnEnd(script) {\n    script.onreadystatechange = function () {\n      if (this.readyState !== 'complete' && this.readyState !== 'loaded') return;\n      this.onreadystatechange = null;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = callbacks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _cb2 = _step2.value;\n\n          _cb2(null, script); // there is no way to catch loading errors in IE8\n\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      callbacks = null;\n    };\n  }\n};\n\nexport default dynamicLoadScript;",null]}