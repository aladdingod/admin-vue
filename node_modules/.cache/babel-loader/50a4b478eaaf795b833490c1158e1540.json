{"remainingRequest":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vueProject\\vueSingle\\vue-element-admin\\src\\views\\example\\components\\ArticleDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\src\\views\\example\\components\\ArticleDetail.vue","mtime":1572245987162},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\vueSingle\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Tinymce from '@/components/Tinymce';\nimport Upload from '@/components/Upload/SingleImage3';\nimport MDinput from '@/components/MDinput';\nimport Sticky from '@/components/Sticky'; // 粘性header组件\n\nimport { validURL } from '@/utils/validate';\nimport { fetchArticle } from '@/api/article';\nimport { searchUser } from '@/api/remote-search';\nimport Warning from \"./Warning\";\nimport { CommentDropdown, PlatformDropdown, SourceUrlDropdown } from \"./Dropdown\";\nvar defaultForm = {\n  status: 'draft',\n  title: '',\n  // 文章题目\n  content: '',\n  // 文章内容\n  content_short: '',\n  // 文章摘要\n  source_uri: '',\n  // 文章外链\n  image_uri: '',\n  // 文章图片\n  display_time: undefined,\n  // 前台展示时间\n  id: undefined,\n  platforms: ['a-platform'],\n  comment_disabled: false,\n  importance: 0\n};\nexport default {\n  name: 'ArticleDetail',\n  components: {\n    Tinymce: Tinymce,\n    MDinput: MDinput,\n    Upload: Upload,\n    Sticky: Sticky,\n    Warning: Warning,\n    CommentDropdown: CommentDropdown,\n    PlatformDropdown: PlatformDropdown,\n    SourceUrlDropdown: SourceUrlDropdown\n  },\n  props: {\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    var validateRequire = function validateRequire(rule, value, callback) {\n      if (value === '') {\n        _this.$message({\n          message: rule.field + '为必传项',\n          type: 'error'\n        });\n\n        callback(new Error(rule.field + '为必传项'));\n      } else {\n        callback();\n      }\n    };\n\n    var validateSourceUri = function validateSourceUri(rule, value, callback) {\n      if (value) {\n        if (validURL(value)) {\n          callback();\n        } else {\n          _this.$message({\n            message: '外链url填写不正确',\n            type: 'error'\n          });\n\n          callback(new Error('外链url填写不正确'));\n        }\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      postForm: Object.assign({}, defaultForm),\n      loading: false,\n      userListOptions: [],\n      rules: {\n        image_uri: [{\n          validator: validateRequire\n        }],\n        title: [{\n          validator: validateRequire\n        }],\n        content: [{\n          validator: validateRequire\n        }],\n        source_uri: [{\n          validator: validateSourceUri,\n          trigger: 'blur'\n        }]\n      },\n      tempRoute: {}\n    };\n  },\n  computed: {\n    contentShortLength: function contentShortLength() {\n      return this.postForm.content_short.length;\n    },\n    displayTime: {\n      // set and get is useful when the data\n      // returned by the back end api is different from the front end\n      // back end return => \"2013-06-25 06:59:25\"\n      // front end need timestamp => 1372114765000\n      get: function get() {\n        return +new Date(this.postForm.display_time);\n      },\n      set: function set(val) {\n        this.postForm.display_time = new Date(val);\n      }\n    }\n  },\n  created: function created() {\n    if (this.isEdit) {\n      var id = this.$route.params && this.$route.params.id;\n      this.fetchData(id);\n    } // Why need to make a copy of this.$route here?\n    // Because if you enter this page and quickly switch tag, may be in the execution of the setTagsViewTitle function, this.$route is no longer pointing to the current page\n    // https://github.com/PanJiaChen/vue-element-admin/issues/1221\n\n\n    this.tempRoute = Object.assign({}, this.$route);\n  },\n  methods: {\n    fetchData: function fetchData(id) {\n      var _this2 = this;\n\n      fetchArticle(id).then(function (response) {\n        _this2.postForm = response.data; // just for test\n\n        _this2.postForm.title += \"   Article Id:\".concat(_this2.postForm.id);\n        _this2.postForm.content_short += \"   Article Id:\".concat(_this2.postForm.id); // set tagsview title\n\n        _this2.setTagsViewTitle(); // set page title\n\n\n        _this2.setPageTitle();\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    setTagsViewTitle: function setTagsViewTitle() {\n      var title = 'Edit Article';\n      var route = Object.assign({}, this.tempRoute, {\n        title: \"\".concat(title, \"-\").concat(this.postForm.id)\n      });\n      this.$store.dispatch('tagsView/updateVisitedView', route);\n    },\n    setPageTitle: function setPageTitle() {\n      var title = 'Edit Article';\n      document.title = \"\".concat(title, \" - \").concat(this.postForm.id);\n    },\n    submitForm: function submitForm() {\n      var _this3 = this;\n\n      console.log(this.postForm);\n      this.$refs.postForm.validate(function (valid) {\n        if (valid) {\n          _this3.loading = true;\n\n          _this3.$notify({\n            title: '成功',\n            message: '发布文章成功',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this3.postForm.status = 'published';\n          _this3.loading = false;\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    draftForm: function draftForm() {\n      if (this.postForm.content.length === 0 || this.postForm.title.length === 0) {\n        this.$message({\n          message: '请填写必要的标题和内容',\n          type: 'warning'\n        });\n        return;\n      }\n\n      this.$message({\n        message: '保存成功',\n        type: 'success',\n        showClose: true,\n        duration: 1000\n      });\n      this.postForm.status = 'draft';\n    },\n    getRemoteUserList: function getRemoteUserList(query) {\n      var _this4 = this;\n\n      searchUser(query).then(function (response) {\n        if (!response.data.items) return;\n        _this4.userListOptions = response.data.items.map(function (v) {\n          return v.name;\n        });\n      });\n    }\n  }\n};",null]}